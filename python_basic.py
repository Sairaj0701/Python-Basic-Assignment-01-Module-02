# -*- coding: utf-8 -*-
"""Python Basic

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G7DpK4mF8SNZv7hxgAbDkgdADQ9T_MqZ

# ***Python Theory***

1.What is Python, and why is it popular?

ANS:

Python is a high-level programming  
language known for its simplicity and readability. It’s popular because it’s beginner-friendly, has a huge community, and supports everything from web development to data science and AI. Its versatility and rich libraries make it a go-to for both startups and big tech companies

2.What is an interpreter in Python?

ANS:

An interpreter in Python is a program that reads and executes Python code line by line. It translates the high-level Python code (which humans write) into machine-level instructions that the computer can understand and run.

3.What are pre-defined keywords in Python?

ANS:

Keywords in Python are reserved words that have special meaning and are used to define the syntax and structure of Python programs. You cannot use them as variable names, function names, or identifiers.They re essentially the building blocks of Python's grammar.

4.Can keywords be used as variable names?

ANS:

No, keywords cannot be used as variable names in Python.Because keywords are reserved words that define Python's syntax and structure. Using them as variable names will cause a SyntaxError.

5.What is mutability in Python?

ANS:

Mutability refers to whether an object's value can be changed after it's been created.
Mutability refers to whether an object's value can be changed after it's been created.

6.Why are lists mutable, but tuples are immutable?

ANS:

Lists are designed for dynamic data so one can add, remove, or change elements.Tuples on the other hand are meant for fixed collections of items. Once created their contents cannot be changed.

7.What is the difference between “==” and “is” operators in Python?

ANS:

In Python == checks if two variables have the same value while is checks if they refer to the exact same object in memory.So == compares content and is compares identity.

8.What are logical operators in Python?

ANS:

Logical operators in Python are used to combine conditional statements and control the flow of logic.The three main logical operators are (and,or,not).

9.What is type casting in Python?

ANS:

Type casting in Python means converting a value from one data type to another.It is useful when one need to work with different types together—like turning a string into a number for calculations.

10.What is the difference between implicit and explicit type casting?

ANS:

Implicit type casting in Python happens automatically when Python converts one data type to another during operations, like turning an int into a float. Explicit type casting is when one manually convert a value using functions like int(), float(), or str(). Implicit is automatic explicit gives you control.

11.What is the purpose of conditional statements in Python?

ANS:

The purpose of conditional statements in Python is to make decisions based on certain conditions. They allow once program to execute different blocks of code depending on whether a condition is true or false. Common conditional statements include if, elif, and else, which help to control the flow of logic and make once code dynamic and responsive.

12.How does the elif statement work?

ANS:

The elif statement in Python stands for "else if" and is used to check multiple conditions after an initial if. It allows the program to evaluate each condition in order and execute the block of code for the first one that's true. If none of the if or elif conditions are true, the else block (if present) runs. This helps control complex decision-making in a clean and readable way.

13.What is the difference between for and while loops?

ANS:

The for loop is used when the number of iterations is known or finite, typically iterating over a sequence like a list or range. In contrast, a while loop runs as long as a specified condition remains true, making it ideal for situations where the number of iterations isn't fixed. Both are used for repetition, but for is more structured, while while offers more flexibility.

14.Describe a scenario where a while loop is more suitable than a for loop?

ANS:

A while loop is more suitable when you don't know in advance how many times the loop should run. For example, reading user input until they type "exit" requires a while loop,since the number of inputs is unpredictable. It keeps running as long as the condition (input not equal to "exit") is true.

# *Practical Questions*
"""

#01.Write a Python program to print "Hello, World!

print("Hello, World!")

#02.Write a Python program that displays your name and age.

name = "Sairaj"
age = 21

print("My name is", name)
print("I am", age, "years old")

#03.Write code to print all the pre-defined keywords in Python using the keyword library.

# Import the keyword module
import keyword

# Get the list of all Python keywords
keywords_list = keyword.kwlist

# Print the keywords
print("Python Keywords:")
for kw in keywords_list:
    print(kw)

#04.Write a program that checks if a given word is a Python keyword.

# Import the keyword module
import keyword

# Ask the user to enter a word
word = input("Enter a word to check if it's a Python keyword: ")

# Check if the word is a keyword
if keyword.iskeyword(word):
    print(f"✅ '{word}' is a Python keyword.")
else:
    print(f"❌ '{word}' is NOT a Python keyword.")

#05.Create a list and tuple in Python, and demonstrate how attempting to change an element works differently for each.

# Creating a list and a tuple
my_list = [10, 20, 30]
my_tuple = (10, 20, 30)

# Modifying an element in the list
print("Original list:", my_list)
my_list[1] = 99
print("Modified list:", my_list)

# Attempting to modify an element in the tuple
print("\nOriginal tuple:", my_tuple)
try:
    my_tuple[1] = 99
except TypeError as e:
    print("Error when modifying tuple:", e)

#06.Write a function to demonstrate the behavior of mutable and immutable arguments.

def modify_arguments(immutable_arg, mutable_arg):
    print("Inside function before modification:")
    print(f"Immutable: {immutable_arg}")
    print(f"Mutable: {mutable_arg}")

    # Try modifying both
    immutable_arg += 10           # Creates a new int object
    mutable_arg.append(100)       # Modifies the original list

    print("Inside function after modification:")
    print(f"Immutable: {immutable_arg}")
    print(f"Mutable: {mutable_arg}")

# Test the function
immutable_value = 5
mutable_value = [1, 2, 3]

print("Before function call:")
print(f"Immutable: {immutable_value}")
print(f"Mutable: {mutable_value}")

modify_arguments(immutable_value, mutable_value)

print("After function call:")
print(f"Immutable: {immutable_value}")  # Unchanged
print(f"Mutable: {mutable_value}")      # Changed

#07. Write a program that performs basic arithmetic operations on two user-input numbers.

 # Ask the user to enter two numbers
num1 = float(input("Enter the first number: "))
num2 = float(input("Enter the second number: "))

# Perform basic arithmetic operations
addition = num1 + num2
subtraction = num1 - num2
multiplication = num1 * num2

# Check for division by zero
if num2 != 0:
    division = num1 / num2
else:
    division = "Undefined (cannot divide by zero)"

# Show the results
print("\nResults:")
print("Addition:", addition)
print("Subtraction:", subtraction)
print("Multiplication:", multiplication)
print("Division:", division)

#08. Write a program to demonstrate the use of logical operators.

# Ask the user for their age and whether they have a valid ID
age = int(input("Enter your age: "))
has_id = input("Do you have a valid ID? (yes/no): ").lower()

# Convert ID input to a boolean
has_valid_id = has_id == "yes"

# Use logical operators to check conditions
print("\nChecking conditions...")

# AND operator: both conditions must be true
if age >= 18 and has_valid_id:
    print("✅ You are allowed to enter.")

# OR operator: at least one condition must be true
elif age >= 18 or has_valid_id:
    print("⚠️ You might be allowed, but more info is needed.")

# NOT operator: reverse the condition
elif not has_valid_id:
    print("❌ You cannot enter without a valid ID.")

else:
    print("❌ You are not allowed to enter.")

#09.Write a Python program to convert user input from string to integer, float, and boolean types.

# Ask the user to enter something
user_input = input("Enter a value: ")

# Convert to integer
try:
    int_value = int(user_input)
    print("Integer:", int_value)
except ValueError:
    print("❌ Cannot convert to integer.")

# Convert to float
try:
    float_value = float(user_input)
    print("Float:", float_value)
except ValueError:
    print("❌ Cannot convert to float.")

# Convert to boolean
# Any non-empty string becomes True, empty string becomes False
bool_value = bool(user_input)
print("Boolean:", bool_value)

#10.Write code to demonstrate type casting with list elements.

# Sample list with mixed string values
data = ["10", "3.14", "0", "", "True", "abc"]

print("Original List:", data)

# Convert to integers
int_list = []
for item in data:
    try:
        int_list.append(int(float(item)))  # Handles both int and float strings
    except ValueError:
        int_list.append(None)  # Use None for items that can't be converted
print("As Integers:", int_list)

# Convert to floats
float_list = []
for item in data:
    try:
        float_list.append(float(item))
    except ValueError:
        float_list.append(None)
print("As Floats:", float_list)

# Convert to booleans
bool_list = [bool(item) for item in data]
print("As Booleans:", bool_list)

#11.Write a program that checks if a number is positive, negative, or zero.

# Get input from the user
num = float(input("Enter a number: "))

# Check the sign
if num > 0:
    print("The number is positive.")
elif num < 0:
    print("The number is negative.")
else:
    print("The number is zero.")

#12. Write a for loop to print numbers from 1 to 10.

for i in range(1, 11):
    print(i)

#13. Write a Python program to find the sum of all even numbers between 1 and 50.

# Initialize sum
even_sum = 0

# Loop through numbers from 1 to 50
for i in range(1, 51):
    if i % 2 == 0:
        even_sum += i

# Display the result
print("Sum of even numbers from 1 to 50 is:", even_sum)

#14. Write a program to reverse a string using a while loop.

# Get input from the user
text = input("Enter a string: ")

# Initialize variables
reversed_text = ""
index = len(text) - 1

# Loop backwards through the string
while index >= 0:
    reversed_text += text[index]
    index -= 1

# Display the reversed string
print("Reversed string:", reversed_text)

#15. Write a Python program to calculate the factorial of a number provided by the user using a while loop.

# Get input from the user
num = int(input("Enter a non-negative integer: "))

# Initialize variables
factorial = 1
i = num

# Calculate factorial
while i > 1:
    factorial *= i
    i -= 1

# Display the result
print(f"Factorial of {num} is:", factorial)